어떤 자연수 n이 있을 때, d(n)을 n의 각 자릿수 숫자들과 n 자신을 더한 숫자라고 정의하자.

예를 들어

d(91) = 9 + 1 + 91 = 101

이 때, n을 d(n)의 제네레이터(generator)라고 한다. 위의 예에서 91은 101의 제네레이터이다.

어떤 숫자들은 하나 이상의 제네레이터를 가지고 있는데, 101의 제네레이터는 91 뿐 아니라 100도 있다. 그런데 반대로, 제네레이터가 없는 숫자들도 있으며, 이런 숫자를 인도의 수학자 Kaprekar가 셀프 넘버(self-number)라 이름 붙였다. 예를 들어 1,3,5,7,9,20,31 은 셀프 넘버 들이다.

1 이상이고 5000 보다 작은 모든 셀프 넘버들의 합을 구하라.



import java.util.ArrayList;

public class Lianxi {
    public static void main(String[] args) {
        ArrayList<Integer> list = new ArrayList<>();
        generator(list);
        System.out.println(summm(list));
    }

    public static void generator(ArrayList list) {
        for (int i = 0; i < 5000; i++) {
            int startNum = i; // 자기 자신을 더해야 하니 초기 값 선언해주고
            String str = String.valueOf(i); // 숫자를 분해하기 위해 우 선 String으로 받기
            for (int j = 0; j < str.length(); j++) {
                startNum += Integer.parseInt(str.substring(j, j + 1));  //분해 한 숫자를 더하기
            }
            if (startNum > 5000) {
                break;
            }
            list.add(startNum);  // 숫자의 합을 리스트에 담기
            // 셀프 넘버가 아닌 애들은 당연히 없겠지
        }
    }
// d(n) 방식으로 한 합의 모음이 list,
// list에 담겨 있다면 셀프 넘버가 아님 그래서 셀프 넘버가 아닌 애들은 건너 뛰고 더하기
    public static int summm(ArrayList list) {
        int sum = 0;
        for (int j = 0; j < 5000; j++) {
            if (list.contains(j)) {  
            
                continue;
            } else {
                sum += j;
            }
        }
        return sum;
    }
}
